// App.js
import React, { useState, useEffect } from "react";
import { View, Text, TextInput, Button, ScrollView, TouchableOpacity, StyleSheet } from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { NavigationContainer } from "@react-navigation/native";
import * as Notifications from "expo-notifications";

const Tab = createBottomTabNavigator();

// ---------- Registro Diario ----------
function RegistroScreen() {
  const [data, setData] = useState({
    comida: "",
    agua: "",
    paseo: "",
    clue: "",
    dientes: "",
    ba√±o: "",
    digestion: "",
    animo: "",
    energia: "",
    sue√±o: "",
  });

  const saveData = async () => {
    const today = new Date().toISOString().split("T")[0];
    try {
      await AsyncStorage.setItem(today, JSON.stringify(data));
      alert("Registro guardado üêæ");
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Registro Diario</Text>
      {Object.keys(data).map((key) => (
        <View key={key} style={styles.item}>
          <Text style={styles.label}>{key.toUpperCase()}</Text>
          <TextInput
            style={styles.input}
            multiline
            value={data[key]}
            onChangeText={(text) => setData({ ...data, [key]: text })}
          />
        </View>
      ))}
      <Button title="Guardar" onPress={saveData} />
    </ScrollView>
  );
}

// ---------- Historial ----------
function HistorialScreen() {
  const [keys, setKeys] = useState([]);
  const [selected, setSelected] = useState(null);
  const [registro, setRegistro] = useState(null);

  useEffect(() => {
    const load = async () => {
      const allKeys = await AsyncStorage.getAllKeys();
      setKeys(allKeys);
    };
    load();
  }, []);

  const loadRegistro = async (key) => {
    const value = await AsyncStorage.getItem(key);
    setRegistro(JSON.parse(value));
    setSelected(key);
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Historial</Text>
      {keys.map((key) => (
        <TouchableOpacity key={key} onPress={() => loadRegistro(key)}>
          <Text style={styles.label}>{key}</Text>
        </TouchableOpacity>
      ))}
      {registro && (
        <View style={styles.card}>
          <Text style={styles.label}>üìÖ {selected}</Text>
          {Object.keys(registro).map((k) => (
            <Text key={k} style={styles.text}>
              {k}: {registro[k]}
            </Text>
          ))}
        </View>
      )}
    </ScrollView>
  );
}

// ---------- Credencial / Acta ----------
function CredencialScreen() {
  const [credencial, setCredencial] = useState({
    nombre: "",
    edad: "",
    raza: "",
  });

  const saveCredencial = async () => {
    try {
      await AsyncStorage.setItem("credencial", JSON.stringify(credencial));
      alert("Credencial guardada ü™™");
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Credencial / Acta</Text>
      {Object.keys(credencial).map((key) => (
        <View key={key} style={styles.item}>
          <Text style={styles.label}>{key.toUpperCase()}</Text>
          <TextInput
            style={styles.input}
            value={credencial[key]}
            onChangeText={(text) => setCredencial({ ...credencial, [key]: text })}
          />
        </View>
      ))}
      <Button title="Guardar" onPress={saveCredencial} />
    </ScrollView>
  );
}

// ---------- Gr√°ficas ----------
function GraficasScreen() {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>üìä Gr√°ficas semanales</Text>
      <Text style={styles.text}>Aqu√≠ ir√≠an gr√°ficas (ejemplo con librer√≠a Recharts en web).</Text>
    </View>
  );
}

// ---------- Notificaci√≥n diaria ----------
async function scheduleNotification() {
  await Notifications.cancelAllScheduledNotificationsAsync();
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "üêæ Bitacruella",
      body: "No olvides registrar el d√≠a de hoy üíú",
    },
    trigger: { hour: 20, minute: 0, repeats: true },
  });

  // Notificaci√≥n de prueba inmediata
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "üêæ Bitacruella",
      body: "Esta es una notificaci√≥n de prueba ‚úÖ",
    },
    trigger: { seconds: 5 },
  });
}

export default function App() {
  useEffect(() => {
    scheduleNotification();
  }, []);

  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Registro" component={RegistroScreen} />
        <Tab.Screen name="Historial" component={HistorialScreen} />
        <Tab.Screen name="Credencial" component={CredencialScreen} />
        <Tab.Screen name="Gr√°ficas" component={GraficasScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

// ---------- Estilos ----------
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#CFFFE3", padding: 16 },
  title: { fontSize: 22, fontWeight: "bold", color: "#C7A6F9", marginBottom: 10 },
  item: { marginBottom: 12 },
  label: { color: "#C7A6F9", fontSize: 16, marginBottom: 4 },
  input: { backgroundColor: "#fff", borderRadius: 8, padding: 10, minHeight: 60 },
  text: { color: "#333", fontSize: 14 },
  card: { backgroundColor: "#C7A6F9", padding: 10, borderRadius: 10, marginTop: 10 },
});
